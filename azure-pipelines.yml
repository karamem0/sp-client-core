trigger:
- develop
- master
- refs/tags/*

pr: none

pool:
  vmImage: 'windows-latest'

variables:
  buildVersion: '3.12.0'
  buildId: '$(Build.BuildId)'
  artifactName: 'SPClientCore'
  solutionName: 'SPClientCore'

stages:
- stage: Build
  displayName: Build stage
  variables:
    solutionFile: 'source/$(solutionName)/$(solutionName).csproj'
    manifestFile: 'source/$(solutionName)/$(solutionName).psd1'
    nuspecFile: 'source/$(solutionName)/$(solutionName).nuspec'
    buildConfiguration: 'Release'
  jobs:
  - job: Build
    displayName: Build job
    steps:
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "##vso[task.setvariable variable=buildNumber]$env:buildVersion.$env:buildId"
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          Update-ModuleManifest -Path $env:manifestFile -ModuleVersion $env:buildNumber
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $xml=[xml](Get-Content $env:nuspecFile)
          $xml.package.metadata.version=$env:buildNumber
          $xml.Save($env:nuspecFile)
    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: '$(solutionFile)'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '$(solutionFile)'
        arguments: '-c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory) -p:version=$(buildNumber);fileversion=$(buildNumber)'
        zipAfterPublish: false
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          Import-Module -Name $env:targetFile
          Update-ModuleManifest -Path $env:targetFile -CmdletsToExport (Get-Command -Module $env:solutionName | %{ $_.Name })
      env:
        targetFile: '$(Build.ArtifactStagingDirectory)/$(solutionName)/$(solutionName).psd1'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: '$(artifactName)'
        publishLocation: 'Container'
- stage: PublishAzureDevOps
  displayName: Publish stage
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - job: Publish
    displayName: Publish job
    steps:
    - checkout: none
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: '$(artifactName)'
        downloadPath: '$(Build.ArtifactStagingDirectory)'
    - task: NuGetToolInstaller@1
    - task: NuGetCommand@2
      inputs:
        command: pack
        packagesToPack: '$(Build.ArtifactStagingDirectory)/**/*.nuspec'
        basePath: '$(Build.ArtifactStagingDirectory)/$(artifactName)/$(solutionName)'
    - task: NuGetCommand@2
      inputs:
        command: push
        packagesToPush: '$(System.ArtifactsDirectory)/**/*.nupkg'
        publishVstsFeed: 'fdb6438d-6f58-4d5a-bfe7-0bc23503c733/87175348-f7e0-4bb0-8c79-3174dde590fe'
- stage: PublishPSGallery
  displayName: Publish stage
  dependsOn: Build
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  jobs:
  - job: Publish
    displayName: Publish job
    steps:
    - checkout: none
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "##vso[task.setvariable variable=buildNumber]$env:buildVersion.$env:buildId"
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: '$(artifactName)'
        downloadPath: '$(Build.ArtifactStagingDirectory)'
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/$(artifactName)/$(solutionName)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(System.ArtifactsDirectory)/$(solutionName)_$(buildNumber).zip'
        replaceExistingArchive: true
    - task: GitHubRelease@1
      inputs:
        gitHubConnection: GitHub
        addChangeLog: false
        assets: '$(System.ArtifactsDirectory)/*'
    - task: PSGalleryPackager@0
      inputs:
        apiKey: '$(NuGetApiKey)'
        path: '$(Build.ArtifactStagingDirectory)/$(artifactName)/$(solutionName)'
